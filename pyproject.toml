[project]
name = "nebula-orion"
dynamic = ["version"]
description = "Orion Python Library"
readme = "README.md"
license = { file = "LICENSE" }
authors = [{ name = "Gishant", email = "khiladisngh@hotmail.com" }]
classifiers = [
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["notion", "api", "workspace", "management", "automation"]
requires-python = ">=3.12"
dependencies = [
    "coloredlogs>=15.0.1",
    "pydantic>=2.10.6",
    "pytest-mock>=3.14.0",
    "python-dotenv>=1.1.0",
    "requests>=2.32.3",
]

[project.urls]
Homepage = "https://github.com/nebulae-official/Orion"
Documentation = "https://orion.readthedocs.io"
Repository = "https://github.com/nebulae-official/Orion.git"
Issues = "https://github.com/nebulae-official/Orion/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
# Explicitly tell Hatch where the package is located within the src directory
packages = ["src/nebula_orion"]

[tool.hatch.version]
path = "src/nebula_orion/__init__.py"

[tool.ruff]
# Same as pycodestyle (`E`) and Pyflakes (`F`)
# Plus select rules from plugins below
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes errors
    "I",   # isort (import sorting)
    "UP",  # pyupgrade (modernize syntax)
    "B",   # flake8-bugbear (potential logic errors/style issues)
    "C4",  # flake8-comprehensions (suggest better comprehensions)
    "SIM", # flake8-simplify (simplify code structure)
    "RUF", # Ruff-specific rules (various checks)
    "ANN", # flake8-annotations (type hint checks - keep for now)
    # Add more specific plugins later if needed, e.g., "PT" for pytest style
]

# Rules to explicitly ignore (add more here if they become noisy)
# D1xx are docstring rules - often good, but can be noisy initially.
ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D107", "LOG007", "G004", "S101"]

# Allow autofix for all enabled rules (when running `ruff check --fix`)
fixable = ["ALL"]
unfixable = []

# Allow unused variables that start with an underscore.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Target Python 3.12 syntax.
target-version = "py312"

# Match the line length used by Black (or your preferred formatter).
# Keep 90 as you had previously.
line-length = 90

# Exclude common directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*/migrations/*",     # Example: exclude Django migrations
]

[tool.ruff.lint.isort]
# If your project structure has `src`, tell isort about it
known-first-party = ["nebula_orion"] # Adjust if needed
# Combine imports "as" imports
combine-as-imports = true

[tool.ruff.format]
# Use Ruff's formatter (similar to Black)
# If you prefer Black, set this up separately and ensure consistency with Ruff's line-length.
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
addopts = "--cov=src --cov-report=term-missing"
testpaths = ["tests"]
markers = [
    "integration: marks tests as integration tests (require network/API token)",
    # Add other custom markers here if needed in the future
]

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "pytest-sugar>=1.0.0",
    "snakeviz>=2.2.2",
]
